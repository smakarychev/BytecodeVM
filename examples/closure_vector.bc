fun vec2()
{
    let x;
    let y;
    fun construct(_x, _y) { x = _x; y = _y; }
    fun set_x(_x) { x = _x; }
    fun set_y(_y) { y = _y; }
    fun get_x() { return x; }
    fun get_y() { return y; }
    fun add(other)
    { 
        let new_vec = vec2();
        new_vec("c")(x + other("gx")(), y + other("gy")());
        return new_vec;
    }
    fun println_vec()
    {
        println('{}', "Vector: ");
        println('{}', "-------------");
        println('{}', x);
        println('{}', y);
        println('{}', "-------------");
    }

    fun instance(op)
    {
        // return closure, based on `op` parameter
        if (op == "c") { return construct; }
        if (op == "sx") { return set_x; }
        if (op == "sy") { return set_y; }
        if (op == "gx") { return get_x; }
        if (op == "gy") { return get_y; }
        if (op == "add") { return add; }
        if (op == "println") { return println_vec; }
        println("unsupported operation");
        return nil;
    }

    return instance;
}

let veca = vec2();
veca("c")(1, 2);
veca("println")();

let vecb = vec2();
vecb("c")(3, 4);
vecb("println")();

let sum = veca("add")(vecb);
sum("println")();

